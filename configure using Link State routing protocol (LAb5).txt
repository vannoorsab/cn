Link State Routing Protocol Algorithm: 
#include<stdio.h> 
#include<string.h> 
#define IN 99 
#define N 6 
int dijkstra(int cost[][N], int source, int target); 
char interface[6][6][20] = { 
{"0", "0", "0", "0", "0", "0"}, {"0", "0", "192.1.1.1", "0", "200.1.1.1", "0"}, 
{"0", "0", "0", "0", "198.1.1.2", "0"}, {"0", "192.1.1.3", "0", "198.1.1.3", "0", "200.1.1.2"}, 
{"0", "0", "200.1.1.3", "0", "200.1.1.4", "0"}}; 
int main() { 
int cost[N][N], i, j, w, co; 
int source, target, x, y; 
printf("\tShortest Path Algorithm (DIJKSTRA'S ALGORITHM)\n\n"); 
for(i = 0; i < N; i++) 
for(j = 0; j < N; j++) 
cost[i][j] = IN; 
for(x = 0; x < N; x++) { 
for(y = x + 1; y < N; y++)  
{ 
printf("Enter the weight of the path between node %d and %d: ", x, y); 
scanf("%d", &w); 
cost[x][y] = cost[y][x] = w; 
} 
printf("\n"); 
} 
 
 
 
    for(x = 0; x < N; x++) { 
    for(y = 0; y < N; y++) { 
    printf("%s:\t", interface[x][y]); 
        } 
        printf("\n"); 
    } 
 
    printf("\nEnter the source: ");  
    scanf("%d", &source);  
    printf("\nEnter the target: ");  
    scanf("%d", &target); 
    co = dijkstra(cost, source, target);  
    printf("\nThe Shortest Path: %d\n", co); 
    return 0; 
} 
 
int dijkstra(int cost[][N], int source, int target)  
{ 
    int dist[N], prev[N], selected[N] = {0}, i, m, min, start, d, j, x, y; 
    int path1[N]; 
   for(i = 0; i < N; i++) { 
        dist[i] = IN;  
        prev[i] = -1; 
 } 
 
    start = source; 
    selected[start] = 1; 
    dist[start] = 0; 
    while(selected[target] == 0)  
{ 
        min = IN; 
        m = -1; // Initializing m to -1 
        for(i = 0; i < N; i++) { 
        if(selected[i] == 0 && dist[start] + cost[start][i] < dist[i])  
{ 
                dist[i] = dist[start] + cost[start][i]; 
                prev[i] = start; 
            } 
 
            if(min > dist[i] && selected[i] == 0) { 
            min = dist[i]; 
            m = i; 
            } 
        } 
 
        if(m == -1) break; // If no valid node is found 
        start = m; 
selected[start] = 1; 
} 
start = target;  
j = 0; 
while(start != -1) { 
path1[j++] = start; 
start = prev[start]; 
} 
printf("Shortest path: "); 
for(int i = j - 1; i >= 0; i--) { 
printf("%d ", path1[i]); 
} 
printf("\n"); 
for(j = j - 1; j >= 0; j--) { 
printf("%d\t", path1[j]); 
if(j > 0) { 
x = path1[j];  
y = path1[j - 1]; 
if(interface[x][y][0] != '0' && interface[y][x][0] != '0') { 
printf("%s\t%s\n", interface[x][y], interface[y][x]); 
} 
} 
} 
return dist[target]
